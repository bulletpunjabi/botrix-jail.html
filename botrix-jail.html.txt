/*
  Botrix Jail Script (Pure JavaScript)
  ------------------------------------
  Handles chat-triggered jail & key commands from Botrix.
  - Supports window.postMessage (for Botrix overlay actions)
  - Optional WebSocket connection (if you have one)
  - Works in OBS Browser Source

  Usage in Botrix Custom JS Action:
  window.postMessage(JSON.stringify({ action: 'jail', user: '{user}' }), '*');
  window.postMessage(JSON.stringify({ action: 'key', user: '{user}' }), '*');
*/

// ===== CONFIG =====
const BOTRIX_WS = null; // optional: set your WebSocket URL here (e.g. "wss://your-botrix-ws.example.com")

// ===== STATE =====
let isJailed = false;
let hideTimeout = null;

// ===== ELEMENTS =====
const jailBox = document.getElementById('jailBox');
const jailMsg = document.getElementById('jailMsg');
const jailTitle = document.getElementById('jailTitle');

// ===== FUNCTIONS =====
function showJail(user) {
  clearTimeout(hideTimeout);
  jailTitle.textContent = "You're in Jail!";
  jailMsg.textContent = user ? `${user} sent you to jail!` : 'Sentenced by chat';
  jailBox.classList.remove('hide', 'show');
  void jailBox.offsetWidth; // restart animation
  jailBox.classList.add('show');
  isJailed = true;
}

function freeJail(user) {
  clearTimeout(hideTimeout);
  jailTitle.textContent = 'Out of Jail!';
  jailMsg.textContent = user ? `${user} used a key! You're free!` : 'You are free!';
  jailBox.classList.remove('show');
  jailBox.classList.add('hide');
  isJailed = false;
}

function handleEvent(evt) {
  if (!evt) return;
  const action = (evt.action || evt.type || (evt.command && evt.command.replace(/^!/, '')) || '').toLowerCase();
  const user = evt.user || evt.username || evt.from || 'chat';
  if (action === 'jail') showJail(user);
  if ((action === 'key' || action === 'unlock' || action === 'release') && isJailed) freeJail(user);
}

// ===== POSTMESSAGE HANDLER (from Botrix overlay) =====
window.addEventListener('message', (ev) => {
  if (!ev.data) return;
  let payload;
  try {
    payload = typeof ev.data === 'string' ? JSON.parse(ev.data) : ev.data;
  } catch {
    payload = { action: ev.data };
  }
  handleEvent(payload);
});

// ===== OPTIONAL: WebSocket (if you want real-time link) =====
if (BOTRIX_WS) {
  (function connectWS() {
    try {
      const ws = new WebSocket(BOTRIX_WS);
      ws.addEventListener('open', () => console.log('Botrix WS connected'));
      ws.addEventListener('message', (m) => {
        try {
          const data = JSON.parse(m.data);
          handleEvent(data);
        } catch {
          handleEvent({ action: m.data });
        }
      });
      ws.addEventListener('close', () => {
        console.warn('WS closed, retrying in 5s...');
        setTimeout(connectWS, 5000);
      });
      ws.addEventListener('error', (err) => {
        console.error('Botrix WS error', err);
        ws.close();
      });
    } catch (err) {
      console.error('WebSocket init failed', err);
      setTimeout(connectWS, 5000);
    }
  })();
}

// ===== TEST KEYS (local) =====
window.addEventListener('keydown', (e) => {
  if (e.key.toLowerCase() === 'j') handleEvent({ action: 'jail', user: 'Local' });
  if (e.key.toLowerCase() === 'k') handleEvent({ action: 'key', user: 'Local' });
});
